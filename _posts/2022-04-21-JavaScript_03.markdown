---
layout: post
title:  기술면접_JavaScript_03
date:   2022-04-21 12:38:35 +0300
image:  '/images/JavaScript.jpg'
tags:   [JavaScript]
---
<br/>

## 데이터타입|프론트엔드 개발자 입문편<br/>

___

### Contents <br/>
1. Variable<br/>
2. Block scope / Global scope<br/>
3. Variable Types<br/>


* 드림코딩 유투브 채널의 JavaScript 기초강의 내용을 바탕으로 정리하는 포스팅입니다. <br/>
* 영상에서 언급되지 않은 내용이 포함되어 있음<br/>
* [Tutorial Video](https://www.youtube.com/watch?v=OCCpGh4ujb8&list=PLv2d7VI9OotTVOL4QmPfvJWPJvkmv6h-2&index=3)<br/>

___

### :bell: Variable<br/>
1. let(Mutable data type) <br/>
  - 변수생성 키워드로 ES6에서 추가됨<br/>

```javascript
let name_ = 'Daye';
console.log(name_);
name_ = 'hello'; 
console.log(name_);

/*
과정
1. App생성 시 메모리가 할당됨
2. let을 통해 특정 메모리 영역을 사용할 수 있는 포인터 생성
3. name이 가리키는 메모리 영역에 다른 값 할당 
*/
```

2. constant(Mutable data type)<br/>
  - 한 번 할당하면 값이 변하지 않는 변수선언 키워드로 let사용 시, 포인터가 가리키는 메모리 영역의 데이터 값을 변경할 수 있으나 constant는 포인터가 잠겨있어 값 할당 이후에는 데이터를 변경할 수 없음 <br/>
  - 장점 : <br/>
    (1) security: 해커가 임의로 데이터값을 변경할 수 없음<br/>
    (2) thread safety: 앱 실행 시 프로세스가 동작하고, 그 안에서 다수의 스레드가 프로세스 동작을 효율적으로 만듬. 하지만 데이터 변경 시 두 개 이상의 스레드가 동시에 변수에 접근할 수 있다는 위험요소가 있음. constant는 이를 방지함.<br/>

3. var<br/>
  - ES6전 변수생성 키워드로 현재는 사용하지 않음<br/>
    이유 : 변수 선언 전에 값을 할당할 수 있으며, 값 할당 전 출력까지 가능하여 지나치게 유연하다는 단점이 있음. 이렇게 어디서 변수를 선언했는지와 무관하게 선언을 가장 위로 올려주는 것을 *var hoisting*이라고 함. 또한 var에서는 Blockscope을 사용할 수 없음(괄호 안에 코드를 작성하여도 어디에서나 내용에 접근할 수 있음) <br/>

___

### :bell: Block scope / Global scope<br/>
1. Block scope : 중괄호를 이용해 블럭 안에 코드 작성, 블럭 밖에서는 내용에 접근할 수 없음<br/>
2. Global scope: 블럭 밖에 코드를 작성, 블럭 바깥에서도 내용에 접근할 수 있음 (프로그램 시작부터 종료까지 메모리 공간을 차지하기 때문에 가능한 적게 사용하는 것을 권장)<br/>

```javascript
let globalScope = 'globalScope';

{
let blockScope = 'blockScope'; 
}

console.log(globalScope);
console.log(blockScope);
```
___

### Variable Types <br/>
1. Primitive: single item을 말하며 number, string, boolean, null, undefiend, symbol가 포함되어 있음<br/>
2. Object: single item을 묶어 box container로 관리하는 것을 말하며 function, first-class function이 포함되어 있음<br/>

* first-class function : function을 변수에 지정



