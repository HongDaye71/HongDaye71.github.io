---
layout: post
title:  기술면접_JavaScript_11-13
date:   2022-04-25 12:38:35 +0300
image:  '/images/JavaScript.jpg'
tags:   [JavaScript]
---
<br/>

## 프론트엔드 개발자 입문(비동기처리) | Callback,Promise,Async,Await<br/>

### Contents <br/>
1. Callback<br/>
  1.1 sync/async<br/>
  1.2 Callback이란?<br/>
  1.3 Callback hell<br/>
2. Promise<br/>
  -
3. Async/Await<br/>
  -

* 드림코딩 유투브 채널의 JavaScript 기초강의 내용을 바탕으로 정리하는 포스팅입니다. <br/>
* 영상에서 언급되지 않은 내용이 포함되어 있음<br/>
* [Tutorial Video_11](https://www.youtube.com/watch?v=s1vpVCrT8f4&list=PLv2d7VI9OotTVOL4QmPfvJWPJvkmv6h-2&index=11)<br/>
* [Tutorial Video_12](https://www.youtube.com/watch?v=JB_yU6Oe2eE&list=PLv2d7VI9OotTVOL4QmPfvJWPJvkmv6h-2&index=12)<br/>
* [Tutorial Video_13](https://www.youtube.com/watch?v=aoQSOZfz3vQ&list=PLv2d7VI9OotTVOL4QmPfvJWPJvkmv6h-2&index=13)<br/>

___

### :bell: Callback<br/>
#### 1.1 sync/async<br/>
**synchronous**<br/>
  - 한 개의 작업이 실행되는 동안 다른 작업은 멈춘 상태로 유지하고 차례를 기다리는 것<br/>
  - JavaScript는 동기언어로 hoising이 된 이후 순차적으로 코드를 실행<br/>
    * hoisting: var, function declaration이 자동적으로 제일 상단에 위치하게 되는 것<br/>

```javascript
console.log("1st");
console.log("2nd");
console.log("3rd");

//출력결과: 1st,2nd,3rd
```

**asynchronous**<br/>
  - 다수의 작업이 동시에 진행되는 것<br/>
  - 코드의 실행순서를 예측할 수 없음<br/>

```javascript
console.log("1st");
setTimeout(()=>{
  console.log("2nd");
  },1000)
console.log("3rd");

//출력결과: 1st,3rd,2nd
//위 코드는 동기언이인 JavaScript를 비동기적으로 처리한 것
```

___

#### <br/>1.2 Callback이란?<br/>
다른 함수에 매개변수로 넘겨준 함수로, 넘겨받은 함수는 때가 되면 나중에 호출<br/>
```javascript
//setTimeout은 콜백함수로 실행되며 지금 당장 실행되지 않고 필요한 때에 callback(호출)하여 사용
setTimeout(function(){
  console.log('1초 후 실행되는 코드')
}, 1000) 

//콜백함수는 anonymous로 Arrow function을 통해 표기가능
setTimeout(() => console.log('1초 후 실행되는 코드'), 1000)
```
* Sync callback : 즉각적으로 실행되는 콜백함수 <br/>
  (ex.setTimeout에서 delayTime을 지정하지 않은 경우)<br/>
* Async callback : 실행시간을 예측할 수 없는 콜백함수 <br/>
  (ex.setTimeout에서 delayTime을 지정한 경우)<br/>

___

#### 1.3 Callback hell<br/>
정의 : 콜백함수를 반복사용하여 코드의 들여쓰기 수준이 감당하기 힘들 정도로 깊어지는 현상. 여기서 반복사용은 하나의 콜백함수 안에서 계속해서 콜백을 반복하는 것을 말함.<br/>
문제 : <br/>
  1. 코드의 가독성이 떨어짐<br/>
  2. 오류 디버깅이 어려움<br/>

<details>
<summary>Callback hell example</summary>
<div markdown="1">

```javascript
class UserStorage {
  //사용자 데이터를 서버에서 받아오는 코드
  loginUser(id, password, onSucess, onError) {
    setTimeout(() => {
      if (
        (id === 'ellie' && password == 'dream') ||
        (id === 'coder' && password == 'academy')
      ) {
        onSucess(id);
      } else {
        onError(new Erorr('not found'));
      }
    }, 2000);
  }

  //사용자의 역할(ex.손님,정회원)을 서버에서 받아오는 코드
  getRoles(user, onSucess, onError){
    setTimeout(() => {
      if (user === 'ellie') {
        onSucess({ name: 'ellie', role: 'admin' });
      } else {
        onError(new Error('no access'));
      }
    }, 1000);
  }
}


  /*---------------------------------------------------------*/

  const userStorage = new UserStorage(); //userStorage class delaration
  const id = prompt('enter your id');
  const password = prompt('enter your password');

  //userStorage 사용하여 로그인
  userStorage.loginUser(
    id, 
    password, 
    user => {
      userStorage.getRoles(
        user,
        userWithRole => {
          alert(
            `Hello ${userWithRole.name}, you have a ${userWithRole.role} role`
          );
        },
        error => {
          console.log(error);
        }
      );
    },
    error => {
      console.log(error);
    }
);
```
</div>
</details>




