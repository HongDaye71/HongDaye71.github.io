---
layout: post
title:  기술면접_JavaScript_11-13
date:   2022-04-25 12:38:35 +0300
image:  '/images/JavaScript.jpg'
tags:   [JavaScript]
---
<br/>

## 프론트엔드 개발자 입문(비동기처리) | Callback,Promise,Async,Await<br/>

### Contents <br/>
1. Callback<br/>
  1.1 sync/async<br/>
  1.2 Callback이란?<br/>
  1.3 Callback hell<br/>
2. Promise<br/>
  2.1 Promise란?<br/>
  2.2 Promise chaining<br/>

3. Async/Await<br/>
  -

* 드림코딩 유투브 채널의 JavaScript 기초강의 내용을 바탕으로 정리하는 포스팅입니다. <br/>
* 영상에서 언급되지 않은 내용이 포함되어 있음<br/>
* [Tutorial Video_11](https://www.youtube.com/watch?v=s1vpVCrT8f4&list=PLv2d7VI9OotTVOL4QmPfvJWPJvkmv6h-2&index=11)<br/>
* [Tutorial Video_12](https://www.youtube.com/watch?v=JB_yU6Oe2eE&list=PLv2d7VI9OotTVOL4QmPfvJWPJvkmv6h-2&index=12)<br/>
* [Tutorial Video_13](https://www.youtube.com/watch?v=aoQSOZfz3vQ&list=PLv2d7VI9OotTVOL4QmPfvJWPJvkmv6h-2&index=13)<br/>

___

### :bell: Callback<br/>
#### 1.1 sync/async<br/>
**synchronous**<br/>
  - 한 개의 작업이 실행되는 동안 다른 작업은 멈춘 상태로 유지하고 차례를 기다리는 것<br/>
  - JavaScript는 동기언어로 hoising이 된 이후 순차적으로 코드를 실행<br/>
    * hoisting: var, function declaration이 자동적으로 제일 상단에 위치하게 되는 것<br/>

```javascript
console.log("1st");
console.log("2nd");
console.log("3rd");

//출력결과: 1st,2nd,3rd
```

**asynchronous**<br/>
  - 다수의 작업이 동시에 진행되는 것<br/>
  - 코드의 실행순서를 예측할 수 없음<br/>

```javascript
{ % raw % }
console.log("1st");
setTimeout(()=>{
  console.log("2nd");
  },1000)
console.log("3rd");

//출력결과: 1st,3rd,2nd
//위 코드는 동기언이인 JavaScript를 비동기적으로 처리한 것
{ % endraw % }
```

___

#### <br/>1.2 Callback이란?<br/>
다른 함수에 매개변수로 넘겨준 함수로, 넘겨받은 함수는 때가 되면 나중에 호출<br/>

```javascript
{% raw %}
//setTimeout은 콜백함수로 실행되며 지금 당장 실행되지 않고 필요한 때에 callback(호출)하여 사용
setTimeout(function(){
  console.log('1초 후 실행되는 코드')
}, 1000) 

//콜백함수는 anonymous로 Arrow function을 통해 표기가능
setTimeout(() => console.log('1초 후 실행되는 코드'), 1000)
{ % endraw % }
```
* Sync callback : 즉각적으로 실행되는 콜백함수 <br/>
  (ex.setTimeout에서 delayTime을 지정하지 않은 경우)<br/>
* Async callback : 실행시간을 예측할 수 없는 콜백함수 <br/>
  (ex.A수업의 수강인원이 모두 채워진 경우, 강의를 오픈하고 수강생에게 관련링크를 전달하는 경우)<br/>

___

#### 1.3 Callback hell<br/>
정의 : 콜백함수를 반복사용하여 코드의 들여쓰기 수준이 감당하기 힘들 정도로 깊어지는 현상. 여기서 반복사용은 하나의 콜백함수 안에서 계속해서 콜백을 반복하는 것을 말함.<br/>

문제 : <br/>
  1. 코드의 가독성이 떨어짐<br/>
  2. 오류 디버깅이 어려움<br/>

<details>
<summary>Callback hell example</summary>
<div markdown="1">

```javascript
{ % raw % }
class UserStorage {
  //사용자 데이터를 서버에서 받아오는 코드
  loginUser(id, password, onSucess, onError) {
    setTimeout(() => {
      if (
        (id === 'ellie' && password == 'dream') ||
        (id === 'coder' && password == 'academy')
      ) {
        onSucess(id);
      } else {
        onError(new Erorr('not found'));
      }
    }, 2000);
  }

  //사용자의 역할(ex.손님,정회원)을 서버에서 받아오는 코드
  getRoles(user, onSucess, onError){
    setTimeout(() => {
      if (user === 'ellie') {
        onSucess({ name: 'ellie', role: 'admin' });
      } else {
        onError(new Error('no access'));
      }
    }, 1000);
  }
}

  /*---------------------------------------------------------*/

  const userStorage = new UserStorage(); //userStorage class delaration
  const id = prompt('enter your id');
  const password = prompt('enter your password');

  //userStorage 사용하여 로그인
  userStorage.loginUser( 
    id, 
    password, 
    user => { //1st Callback
      userStorage.getRoles(
        user,
        userWithRole => { //2nd Callback
          alert(
            `Hello ${userWithRole.name}, you have a ${userWithRole.role} role`
          );
        },
        error => { //3rd Callback
          console.log(error);
        }
      );
    },
    error => { //4th Callback
      console.log(error);
    }
);
{ % endraw % }
```
</div>
</details>

___


### :bell: Promise<br/>
#### 2.1 Promise란?<br/>
- JavaScript에 내장되어 있는 오브젝트로 비동기를 간편하게 진행할 수 있도록 함<br/>
- 정해진 기능을 수행 후, 정상적으로 기능이 수행되었는지 혹은 오류가 발생하였는지에 대한 내용 전달<br/>
- Promise는 생성된 순간, 즉각적으로 실행됨<br/>

**Promise State**<br/>
프로세스가 기능을 수행중인지 혹은 수행을 성공(실패)하였는지에 대한 상태<br/>
1. pending : 기능 수행중<br/>
2. fulfilled : 기능 수행성공<br/>
3. rejected : 기능 수행실패<br/>

___

**Producer vs Consumer**<br/>
producer : 데이터 제공자 (원하는 기능을 수행하여 해당하는 데이터 생성)<br/>

```javascript

{ % raw % }
const promise = new Promise((resolve, reject) => {
  // doing some heavy work(ex.서버에서 데이터를 받아오는 등의 작업을 말하며, 이를 동기적으로 실행할 경우 비효율적이므로 Promise를 사용하여 비동기적으로 실행하도록 함)
  console.log('doing something...');

  //1. Wizaed of Oz: 실제 서버를 이용하는 것과 같은 효과를 주기위해 setTimeout사용
  //2. resolve or reject사용
  serTimeout(() => {
    resolve('ellie') //기능수행에 성공할 경우 출력
  },2000);

  setTimeout(() => {
    reject(new Error('no network')) //기능수행에 실패할 경우 출력
  },2000);

});
{ % endraw % }
```

<br/>consumer : 데이터 사용자 (원하는 데이터 소비)<br/>
  - then, catch, finally를 통해 값을 받아올 수 있음<br/>

```javascript
{ % raw % }
promise
  //then: 성공할 경우, value(resolve에서 정의)에서 값을 받아와 출력
  .then((value) => {
    console.log(value);
  })

  //catch: 실패할 경우, 오류메세지 출력
  .catch(error => {
    console.log(error);
  })

  //finally: 성공,실패 여부와 무관하게 출력
  .finally(() => {
    console.log('finally');
  })
{ % endraw % }
```

___

#### 2.2 Promise chaining<br/>
**Promise chaining**<br/>
It allows you to chain on another then call which will run when the second promise is fulfilled<br/>

```javascript
{ % raw % }
const fetchNumber = new Promise((resolve, reject) => {
  setTimeout(() => resolve(1), 1000);
});

fetchNumber
  .then(num => num * 2)
  .then(num => console.log(num));
{ % endraw % }
```

___

**Promise chaining error handling**<br/>
- 다수의 Promise생성 시, reject/catch를 통해 어느 부분에서 오류가 발생했는지 확인 <br/>
- catch(error => {})를 통해 오류 대체값 설정<br/>

```javascript
{ % raw % } 
//Producer
const gethen = () =>
  new Promise((resolve, reject) => {
    setTimeout(() => resolve('hen'), 1000)
})
const getEgg = hen =>
  new Promise((resolve, reject) => {
    setTimeout(() => reject(new Error (`error! ${hen} -> egg`)), 1000)
})
const cook = egg =>
  new Promise((resolve, reject) => {
    setTimeout(() => resolve(`${egg} -> fired egg`), 1000)
})


//Consumer
gethen()
  .then(getEgg)
  .catch(error => {
    return 'alternate';
  })
  .then(egg => cook(egg))
  .then(meal => console.log(meal))
  .catch(console.log);
{ % endraw % }
```

<details>
<summary>Callback hell -> Promise</summary>
<div markdown="1">

```javascript
{ % raw % }
class UserStorage {
  loginUser(id, password) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if (
          (id === 'ellie' && password == 'dream') ||
          (id === 'coder' && password == 'academy')
        ) {
            resolve(id);
        } else {
            reject(new Erorr('not found'));
        }
      }, 2000);
    });
  }

  getRoles(user){
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if (user === 'ellie') {
          resolve({ name: 'ellie', role: 'admin' });
        } else {
          reject(new Error('no access'));
        }
      }, 1000);
    })
  }
}

const userStorage = new UserStorage(); 
const id = prompt('enter your id');
const password = prompt('enter your password');

userStorage
  .loginUser(id, password) //userStorage에 id,pw전달
  .then(userStorage.getRoles) //loginUser에서 resolve일 경우, user를 받아와서 getRoles호출
  //위 코드의 경우, user= > 생략: 콜백함수 전달 시, 받아오는 value를 통해 다른함수를 바로 호출하는 경우, 생략가능
  .then(user => alert(`Hello ${user.name}, you have a ${user.role} role`))
  .catch(console.log);
{ % endraw % }
```

</div>
</details>


