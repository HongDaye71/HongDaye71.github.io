---
layout: post
title:  기술면접_JavaScript_04_05
date:   2022-04-22 12:38:35 +0300
image:  '/images/JavaScript.jpg'
tags:   [JavaScript]
---
<br/>

## 코딩의 기본 | operator/if/for/loop<br/>

___

### Contents <br/>
1. Operator(type/if/for/loop)<br/>
2. Function<br/>
3.  <br/>
4.  <br/>


* 드림코딩 유투브 채널의 JavaScript 기초강의 내용을 바탕으로 정리하는 포스팅입니다. <br/>
* 영상에서 언급되지 않은 내용이 포함되어 있음<br/>
* [Tutorial Video_04](https://www.youtube.com/watch?v=YBjufjBaxHo&list=PLv2d7VI9OotTVOL4QmPfvJWPJvkmv6h-2&index=4)<br/>
* [Tutorial Video_05](https://www.youtube.com/watch?v=e_lU39U-5bQ&list=PLv2d7VI9OotTVOL4QmPfvJWPJvkmv6h-2&index=5)<br/>

___

### :bell: operator<br/>

<details>
<summary>Click to view operator types</summary>
<div markdown="1">

```javascript
//1. String concentration
console.log('my' + 'cat')
console.log('1' + 2) 
console.log('elli\'s book')
console.log('elli\'s \n book')
console.log('elli\'s \t book')


//2. Numeric operator
console.log(5 % 2) 
console.log(2 ** 3) //exponentiation 


//3. Increment and decrement operator
let counter = 2;
const preIncrement = ++counter; 
/*
preIncrement : counter에 +1후 preIncrement변수에 값 할당
postIncrement : postIncrement변수에 값 할당 후 counter에 +1
++, -- 동일
*/


//4. Assignment operators
let x = 3;
x += y; // x = x+y;


//5. comparison operators
console.log(10 < 6)


//6. Logical operators : || (or), && (and), ! (not)
const value1 = false;
const value2 = 4 < 2;

function check() {
  for (let i = 0; i < 10; i++>)
  {
    console.log('wasting time');
  }
  return true;
}

console.log(`or : ${value1 || value2 || check()}`);
console.log(`or : ${value1 || value2 || check()}`);
/*
or 
출력결과 : true
주의할 점 : or연산자는 첫 번째 조건이 true인 경우, 뒤에 조건은 더 보지 않고 tru출력. 따라서 check()처럼 비교적 연산량이 많은 조건은 뒤에 배치하는 것이 효율적임

and 
출력결과 : false
주의할 점 : and연산자는 첫 번째 조건이 false인 경우, 뒤에 조건은 더 보지 않고 false출력.따라서 check()처럼 비교적 연산량이 많은 조건은 뒤에 배치하는 것이 효율적임
*/


//7. Eaulity
const stringFive = '5';
const numberFive = 5;
console.log(stringFive == numberFive) 
console.log(stringFive +== numberFive) 
/*
==
출력결과 : true
이유 : ==는 lose eqauplity로 type conversion을 통해 검사하기 때문에 stirng 5와 number 5가 같다는 결과출력

===
출력결과 : false
이유 : ===는 strict eaulity로 type conversion을 사용하기 않기 때문에 값과 type을 모두 확인
주의할 점 : 동일한 single item으로 이루어진 두 개의 object가 존재하더라도 서로 다른 메모리 주소를 참조하고 있기 때문에 obejct equlity는 false로 출력
*/

```
</div>
</details>

<details>
<summary>Click to view if/for/loop operator</summary>
<div markdown="1">

```javascript
//1. if 
const name = 'ellie';

if (name=='ellie'); {
  console.log('Welcome, Ellie!');}
  else if (name == 'coder') {
    console.log('You are amazing coder');}
  else {
    console.log('unknown')}


//2. Teranry operator (if문을 보다 간단하게 사용)
console.log(name === 'ellie' ? 'yes':'no')
//true인 경우 왼쪽 값 출력 / false인 경우 오른쪽 값 출력


//3. Switch operator
const browser = 'IE';
switch (browser){
  case 'IE' :
    console.log('go away!');
    break;
  case 'Chrome' :
    console.log('Chrome');
    break;
  case 'Firefox':
    console.log('Firefox');
    breakl
}
/*
switch문과 if문의 차이 :
if문은 if를 만날 때 마다 조건문을 만족하는지 확인하기 위해 메모리상에서 명령어를 읽어옴
switch문은 처음 입력값을 확인할 때에만 메모리상에서 명령어를 읽어옴

즉, 조건이 많은 경우에는 switch문을 사용하는 것이 if문 대비 cpu를 효율적으로 사용하게 함
*/


//4. while loop
//조건문이 맞는 경우에만 실행하고자 할 때 사용
let i = 3;
while (i > 0) {
  console.log(`while: ${i}`)
  i--;
}


//5. do while loop
//블럭 먼저 실행 후 조건이 맞는지 확인
let i = 3;
do {
  console.log(`while: ${i}`)
  i--;
} while (i > 0);


//6. for loop (begin; consition; step;)
for (i=3; i>0; i=i-2){
  console.log('inline varable declaratoin')
}

```
</div>
</details>

___

### :bell: Function<br/>

1. Function이란?<br/>
- 프로그램에서 필수적인 Building block<br/>
- 여러번 재 사용이 가능한 SubProgram<br/>
- 값을 계산하거나 특정 Task 수행<br/>

2. Function delcaration<br/>
- ```function name(param1, param2) {body... return;}```<br/>
- function은 가능한 한 가지의 기능만 하도록 작성<br/>
- function name은 가능한 동사로 지정<br/>

```javascript
//function예시
function print(message){
  console.log(`message :  ${message}`)
}

print('Hello World!')

//동일한 function을 TypeScript로 작성(param or return type명시필요)
function log(message : string){
    console.log(`message :  ${message}`)
  }
  
  log('Hello World!')
```

* [TypeScript Playgrond](https://www.typescriptlang.org/play?#code/PTAEHUFMBsGMHsC2lQBd5oBYoCoE8AHSAZVgCcBLA1UABWgEM8BzM+AVwDsATAGiwoBnUENANQAd0gAjQRVSQAUCEmYKsTKGYUAbpGF4OY0BoadYKdJMoL+gzAzIoz3UNEiPOofEVKVqAHSKymAAmkYI7NCuqGqcANag8ABmIjQUXrFOKBJMggBcISGgoAC0oACCbvCwDKgU8JkY7p7ehCTkVDQS2E6gnPCxGcwmZqDSTgzxxWWVoASMFmgYkAAeRJTInN3ymj4d-jSCeNsMq-wuoPaOltigAKoASgAywhK7SbGQZIIz5VWCFzSeCrZagNYbChbHaxUDcCjJZLfSDbExIAgUdxkUBIursJzCFJtXydajBBCcQQ0MwAUVWDEQC0gADVHBQGNJ3KAALygABEAAkYNAMOB4GRonzFBTBPB3AERcwABS0+mM9ysygc9wASmCKhwzQ8ZC8iHFzmB7BoXzcZmY7AYzEg-Fg0HUiQ58D0Ii8fLpDKZgj5SWxfPADlQAHJhAA5SASPlBFQAeS+ZHegmdWkgR1QjgUrmkeFATjNOmGWH0KAQiGhwkuNok4uiIgMHGxCyYrA4PCCimSXFg9Ua1WVyEEgKdoHyV1QlE4zB1AG9FCUSjK5ZAFfBlQADceTlAz0AAEiXB8dkAAvru9SUr6vQI-FUrI0LoCKIM3uABCSN30AgA)


3. Parameters<br/>
- premitive parameter : passed by value<br/>
- object parameter : passed by reference<br/>
[참고자료](https://hongdaye71.github.io/blog/javascript-03)<br/>

```javascript
//object parameter에 function을 적용하였을 때, 출력과정

//code : 
function changeName(obj) {
    obj.name = 'coder';
}

const ellie = {
    name : 'ellie',
    age : '20'
}

changeName(ellie)
console.log(ellie)

/*
과정 :
1. name을 'coder'로 변경하는 function생성
2. ellie parameter생성 
3. ellie는 object parameter이므로 메모리에는 single items(name,age)의 주소를 참조하는 reference가 저장됨
4. ellie parameter에 function적용
5. reference중 name의 데이터 값 변경
*/

```






<details>
<summary>Click to view operator types</summary>
<div markdown="1">

</div>
</details>


 